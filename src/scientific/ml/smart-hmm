// **********************************************************************
// Copyright (c) Artur M. Brodzki 2020. All rights reserved.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// **********************************************************************

#ifndef SCIENTIFIC_ML_SMART_HMM_H
#define SCIENTIFIC_ML_SMART_HMM_H

#include <algorithm>
#include <armadillo>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <fstream>
#include <iostream>
#include <limits>
#include <sstream>
#include <string>
#include <unistd.h>
#include <unordered_map>
#include <vector>

namespace scientific
{
namespace ml
{

// S - type representing sequence generated by HMM
// E - type representing one element of that sequence
// For most cases, S will be string, and E will be char
template<class E, class S>
class Hmm
{
  private:
    unsigned current_state;
    arma::mat transitions;
    arma::mat emissions;
    S alphabet;

    // Auxiliary function
    // Given vector of N probabilities (summing up to 1),
    // Function returns unsigned from 0 to N-1
    // according to specified probabilities distribution
    static unsigned random_element( const arma::mat& );

    // Move HMM machine to the next state,
    // according with current transitions and emissions probabilities
    // Returns HMM output drawn
    E next_state();

  public:
    // Assumes uniform probability distribution for transitions and emissions
    Hmm( unsigned num_states, const S&, unsigned );
    // Construct an HMM object with given transitions and emissions probabilities
    Hmm( const arma::mat& transitions, const arma::mat& emissions, const S&, unsigned );

    S get_alphabet() const;
    std::vector<unsigned> get_states() const;
    arma::mat get_emissions() const;
    arma::mat get_transitions() const;
    unsigned get_current_state() const;
    void set_current_state( unsigned );

    // Generate random sequence with length specified
    S generate_sequence( unsigned );
    // std::vector<double> find_viterbi_path( const S& sequence, unsigned initial_state );

    template<class E2, class S2>
    friend std::ostream& operator<<( std::ostream&, const Hmm<E2, S2>& );
};

template<class E, class S>
std::vector<unsigned> Hmm<E, S>::get_states() const
{
    std::vector<unsigned> result;
    for( unsigned i = 0; i < transitions.n_rows; ++i ) {
        result.push_back( i );
    }
    return result;
}

template<class E, class S>
S Hmm<E, S>::get_alphabet() const
{
    return alphabet;
}

template<class E, class S>
arma::mat Hmm<E, S>::get_emissions() const
{
    return emissions;
}

template<class E, class S>
arma::mat Hmm<E, S>::get_transitions() const
{
    return transitions;
}

template<class E, class S>
unsigned Hmm<E, S>::get_current_state() const
{
    return current_state;
}

template<class E, class S>
void Hmm<E, S>::set_current_state( unsigned state )
{
    if( state > get_states().back() ) {
        throw std::out_of_range();
    }
    current_state = state;
}

template<class E, class S>
unsigned Hmm<E, S>::random_element( const arma::mat& probabilities )
{
    double seed = double( rand() % 1000000 ) / 1000000;
    unsigned i = 0;
    do {
        seed = seed - probabilities( i );
        if( seed < 0 ) {
            break;
        }
        ++i;
    } while( i < probabilities.n_elem );
    return i;
}

template<class E, class S>
E Hmm<E, S>::next_state()
{
    arma::mat current_transitions =
      transitions( arma::span( current_state ), arma::span( 0, get_states().size() - 1 ) );
    arma::mat current_emissions =
      emissions( arma::span( current_state ), arma::span( 0, get_alphabet().size() - 1 ) );

    current_state = random_element( current_transitions );
    return alphabet[random_element( current_emissions )];
}

template<class E, class S>
Hmm<E, S>::Hmm( unsigned num_states, const S& alphabet, unsigned initial_state )
    : alphabet( alphabet )
    , current_state( initial_state )
{
    transitions.set_size( num_states, num_states );
    transitions.fill( 1 / double( num_states ) );
    emissions.set_size( num_states, alphabet.size() );
    emissions.fill( 1 / double( alphabet.size() ) );
}

template<class E, class S>
Hmm<E, S>::Hmm( const arma::mat& transitions, const arma::mat& emissions, const S& alphabet,
                unsigned initial_state )
    : current_state( initial_state )
    , transitions( transitions )
    , emissions( emissions )
    , alphabet( alphabet )
{
    bool valid_sizes = transitions.n_rows == transitions.n_cols &&
                       transitions.n_rows == emissions.n_rows &&
                       emissions.n_cols == alphabet.size();
    if( not valid_sizes ) {
        throw std::invalid_argument();
    }
}

template<class E, class S>
S Hmm<E, S>::generate_sequence( unsigned sequence_length )
{
    S result;
    for( unsigned i = 0; i < sequence_length; ++i ) {
        result.push_back( next_state() );
    }
    return result;
}

// std::vector<double> find_viterbi_path( const S& sequence, unsigned initial_state )
// {
//     arma::mat pi = transitions_( span( initial_state ), span( 0, max_state() ) );
//     arma::mat t1( num_states(), sequence.size() );
//     arma::mat t2( num_states(), sequence.size() );
// }

template<class E, class S>
std::ostream& operator<<( std::ostream& os, const Hmm<E, S>& h )
{
    os << "Current state: " << std::endl
       << h.current_state << std::endl
       << "Transitions: " << std::endl
       << h.transitions << std::endl
       << "Emissions: " << std::endl
       << h.emissions;
    return os;
};

} // namespace ml
} // namespace scientific

#endif // SCIENTIFIC_ML_SMART_HMM_H
